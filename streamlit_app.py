import streamlit as st
from streamlit_option_menu import option_menu
from PIL import Image
import streamlit.components.v1 as components

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns

from bokeh.plotting import figure, output_notebook, show, curdoc, save
from bokeh.models import BoxAnnotation, ColumnDataSource, Range1d
from bokeh.models.tools import HoverTool
from bokeh.layouts import row
from bokeh.models import Range1d, LabelSet, Tabs
from bokeh.palettes import inferno

from sklearn import model_selection
from sklearn import ensemble
from sklearn import svm
from sklearn import neighbors
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV



#[theme]
#base="light"
#primaryColor="#9400d3"

def set_theme():
    st.set_page_config(
        page_title="Game Project Prediction",
        page_icon="üéÆ",
        layout="centered",
        initial_sidebar_state="expanded",
    )

    # Personnalisation du th√®me
    st.markdown(
        """
        <style>
        .css-1aumxhk {  /* Exemple de s√©lecteur CSS */
            background-color: #0E1117;
            primaryColor="#9400d3";
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# fichiers 
df = pd.read_csv('vgsales_all1.csv')
df_ml = pd.read_csv('df_ml.csv')

flierprops = dict(marker="X", markerfacecolor='darkviolet', markersize=12,
                  linestyle='none')

# 2. horizontal menu
selected = option_menu(None, ['Projet','M√©thodologie','Analyse','Mod√©lisation','Conclusion'],
    icons=['book',"eyedropper",'calculator','clipboard','controller'],
    menu_icon="cast", 
    default_index=0, 
    orientation="horizontal",
    styles={
            "icon": {"color": "#blank", "font-size": "13px"},
            "nav-link": {
                "font-size": "12px",
                "text-align": "center",
                }})

# Pr√©sentation
if selected == "Projet":
    image = Image.open('media/manette.jpeg')
    st.image(image)
    st.title("La Data Science sera t elle le \"cheat code\" de la vente d'un jeu vid√©o ?")
    st.markdown("Estimer les ventes d'un produit avant son lancement peut √™tre une v√©ritable force pour la rentabilit√© d'une entreprise. Dans le cadre de ce projet nous allons essayer de d√©ployer un mod√®le qui permettra de pr√©dire les ventes d'un jeu.")
    st.markdown("""Ce projet a permis de tirer parti des connaissances apprises lors du cursus de formation Datascientest en g√©rant un projet complet pour r√©pondre √† une probl√©matique donn√©e.
* Techniquement : ‚Ä®Les donn√©es √©tant incompl√®tes il faut avant tout venir compl√©ter et actualiser le jeu de donn√©es pour affiner au mieux l'analyse et les tendances.‚Ä®
* Economiquement:‚Ä®Le projet prend son int√©r√™t dans l'estimation des ventes en quantit√©. Gr√¢ce a ce dernier,  en cas de r√©ussite, nous pourrons expliquer et pr√©voir les ventes et sp√©cifier a quoi le succ√®s est d√ª (genre, notes, divers). ‚Ä®Pour les √©quipes en charge de la prise de d√©cision du lancement d'un jeu vid√©o, cette pr√©diction aura √©norm√©ment de valeur, car elle permettra de savoir si il est pertinent ou pas de lancer sa production en fonction des objectifs de rentabilit√© fix√©s.""")
    
    st.subheader("Contacter l'√©quipe")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        linkedin_celine = "https://www.linkedin.com/in/celine-anselmo/"
        image_celine = "./app/static/Celine_Anselmo.png"
        
        st.markdown(f'<a href="{linkedin_celine}" target="_blank"><img src="{image_celine}" width="200"></a>', unsafe_allow_html=True)

    with col2:
        linkedin_cindy = "https://www.linkedin.com/in/cindysotton/"
        image_cindy = "./app/static/Cindy_Sotton.png"
        
        st.markdown(f'<a href="{linkedin_cindy}" target="_blank"><img src="{image_cindy}" width="200"></a>', unsafe_allow_html=True)

    
    with col3:
        linkedin_karine = "https://www.linkedin.com/in/karine-minatchy/"
        image_karine = "./app/static/Karine_Minatchy.png"
        
        st.markdown(f'<a href="{linkedin_karine}" target="_blank"><img src="{image_karine}" width="200"></a>', unsafe_allow_html=True)

    with col4:
        linkedin_dorian = "https://www.linkedin.com/in/dorian-rivet/"
        image_dorian = "./app/static/Dorian_Rivet.png"
        
        st.markdown(f'<a href="{linkedin_dorian}" target="_blank"><img src="{image_dorian}" width="200"></a>', unsafe_allow_html=True)

    st.subheader("Objectifs")
    st.markdown("""Nous devons,  √† partir du dataset fourni et des variables collect√©es, pr√©dire les ventes de la sortie d'un jeu vid√©o. Pour ce faire nous avons identifi√© les principaux objectifs et √©tapes qui vont jalonner la r√©alisation du projet.
Les principales √©tapes identifi√©es dans le cadre du projet sont:  
* Extraction des donn√©es et nouvelles donn√©es
* Data processing
* Data profiling
* Mod√©lisation des donn√©es
* Conclusion et pr√©conisations
Afin de r√©pondre, au mieux, √† la probl√©matique, nous avons pris contact avec un expert m√©tier (ancien D√©veloppeur d‚ÄôUbisoft) qui aura pu nous partager ses connaissances sur le secteur, mais aussi son expertise en Data Science √©tant lui m√™me Data Scientist.""")

    # texte violet
    st.markdown("""
    <style>
    .purple {
        color : darkviolet;
    }
    </style>
    """, unsafe_allow_html=True)
    st.markdown('<p class="purple">Entretien m√©tier :</p>', unsafe_allow_html=True)
    st.markdown("""
Voici les points essentiels qui nous aurons aid√© dans notre approche pour r√©pondre √† la probl√©matique :

1. Les variables qui sont int√©ressantes √† analyser pour la pr√©diction d‚Äôun jeu aurait pu √™tre les suivantes :
* les tendances march√©
* le cours de la bourse
* le mode de commercialisation (abonnement, pass...)
* la popularit√© en ligne (nombre de commentaires sur un trailer, commentaires Redit)

2. Avoir une approche avec de la temporalit√© est √©galement indispensable.

En l‚Äô√©tat notre dataset ne nous permettait pas d‚Äôajouter une notion de temporalit√©, de part notre avanc√© et les difficult√©s que nous avons rencontr√©, nous n‚Äôavons pu tirer pleinement parti de ces recommandation mais n√©anmoins, elle nous ont donn√© des id√©es pour apporter des √©l√©ments de r√©ponses parall√®le √† la probl√©matique dans la conclusion.""")

# M√©thodologie
if selected == "M√©thodologie":
    image = Image.open('media/manette.jpeg')
    st.image(image)
    tab1, tab2, statistiques = st.tabs(["Extraction des donn√©es", "Data processing",'Statistiques'])
    # texte violet
    st.markdown("""
    <style>
    .purple {
        color : darkviolet;
    }
    </style>
    """, unsafe_allow_html=True)
    
    with tab1:
        st.markdown('<p class="purple">Nos donn√©es - Dataset Vgchart:</p>', unsafe_allow_html=True)
        st.markdown("""

Le dataset Vgchart est le jeu initial fourni dans le cadre du projet disponible sur Kaggle. les variables se r√©partissent comme suit:
* Nom
* Date de sortie
* Genre
* Plateforme
* Publisher
* Ventes par r√©gion""")
        st.markdown('<p class="purple">Compl√©tion des donn√©es - Utilisation du scrapping: </p>', unsafe_allow_html=True)
        st.markdown("""
Nous avons scrapp√© le site Vgchart pour r√©cup√©rer : 
* des donn√©es plus r√©centes
* les variables Critic Score et Studio. 

Ce nouveau jeu annule et remplace le premier jeu de donn√©es de Vgchart.

Pour compl√©ter les donn√©es √† disposition nous avons scrapp√© le site Metacritic et le site jeuvid√©o.com avec les librairies S√©lenium et BeautifulSoup pour collecter les notes utilisateurs et presse sur une communaut√© orient√©e mondiale et fran√ßaise.

Le scrapping a permis de r√©cup√©rer les informations suivantes:
* Description
* Studio
* Note utilisateur
* Nombre de note utilisateur
* Note presse
* Nombre de vote presse
* Genre

Les r√©sultats n'√©tant pas √† la hauteur autant pour Metacritic que pour jeuxvideo.com (% de Nan trop √©lev√©) nous n'avons pas conserv√© les donn√©es. Pour jeuxvideo.com, les donn√©es avaient encore plus de Nan. En effet, les jeux scrapp√©s avec un id fran√ßais ne pouvaient communiquer avec le dataset initial.""")
            
        st.markdown ('Voici notre nouveau dataset:') 
        st.write(df.head())

    with tab2:
        # texte violet
        st.markdown("""
        <style>
        .purple {
            color : darkviolet;
        }
        </style>
        """, unsafe_allow_html=True)
        st.markdown('<p class="purple">1 - Nettoyage de donn√©es:  </p>', unsafe_allow_html=True)
        st.markdown("""
* formater le type de la variable date
* supprimer les donn√©es apr√®s 2022
* supprimer les donn√©es NaN pour Global_Sales (notre variable cible)
* supprimer les donn√©es NaN pour Critic_score (la variable qui a √©t√© l'objet du scrapping)
* remplacer les NaN par 0 pour les sales des r√©gions 
* renommer les colonnes pour la compr√©hension
* formater des colonnes en str lorsque n√©cessaire""")

        st.markdown('<p class="purple">2 - Transformation des donn√©es: </p>', unsafe_allow_html=True)
        st.markdown("""
* remplacer dans un premier temps les NaN par 0 afin d‚Äô√©viter la cr√©ation d‚Äôarray lors de notre transformation du dataset en table pivot
* supprimer les variables extr√™mes pour l'ann√©e, le genre et la plateforme
* encoder la variable plateforme afin qu'elle soit en colonne (ex: colonne wii[0,1]) et non en ligne. Une fois le pivot r√©alis√©, nous reconstituons la variable en pr√©cisant "Multi_plateforme" si le jeux est sur plusieurs plateformes.
* modifier le dataset en table pivot afin d‚Äôavoir une ligne par jeu
* organiser l'ordre des colonnes pour les avoir dans un ordre plus pertinent 

Le dataset obtenu est celui utilis√© pour la visualisation et les statistiques""")
    
    with statistiques:
        #Analyses statistiques

        # texte violet
        st.markdown("""
        <style>
        .purple {
            color : darkviolet;
        }
        </style>
        """, unsafe_allow_html=True)

        #Global_Sales
        st.markdown('<p class="purple">Corr√©lation avec la variable cible: Global_Sales</p>', unsafe_allow_html=True)
        st.markdown("L'analyse de la variance ANOVA a √©t√© utilis√©e pour mettre en relation nos diff√©rentes variables explicatives: Platform, Genre, Studio, Publisher et notre variable cible Global_Sales.")

        #image stats1
        image_path = "media/stats1.png"
        try:
            image = Image.open(image_path)
            st.image(image, caption="Anova")
        except:
            st.error("Impossible d'afficher l'image")

        st.markdown("L'objectif du test est de comparer les moyennes des deux √©chantillons et de conclure sur l'influence d'une variable explicative cat√©gorielle sur la loi dune variable continue √† expliquer. Lorsque la p-value (PR(>F)) est inf√©rieur √† 5%, on rejette l'hypoth√®se selon laquelle la variable n'influe pas sur Global_Sales")

        st.markdown("Nous notons que les autres variables explicatives influent sur la valeur cible. Nous proc√®derons donc √† une analyse compl√©mentaire pour identifier le poids des variables lors de la mod√©lisation.")

        #variables explicatives
        st.markdown('<p class="purple">Corr√©lation entre les variables explicatives:</p>', unsafe_allow_html=True)

        st.markdown("Nous avons utilis√© la m√©thode statistique V de Cramer pour mesurer le niveau de corr√©lation entre nos variables explicatives de type qualitatives")
        
        #image stats2
        image_path = "media/stats2.png"
        try:
            image = Image.open(image_path)
            st.image(image, caption="V de Cramer")
        except:
            st.error("Impossible d'afficher l'image")

        st.markdown("Cette analyse a permis de mettre en valeur des relations fortes comme le genre et le publisher et de mettre de c√¥t√© des analyses comme platform et genre o√π il n'y a pas de corr√©lation.")


if selected == "Analyse":
    # Retraitement des plateformes pour pr√©ciser les fabricants de celles ci
    mapping_fabricant = {
    'WiiU': 'Nintendo',
    '3DS': 'Nintendo',
    'DS': 'Nintendo',
    'Wii': 'Nintendo',
    'N64': 'Nintendo',
    'NS': 'Nintendo',
    'GC': 'Nintendo',
    'GBA': 'Nintendo',
    'PS2': 'Sony',
    'PS': 'Sony',
    'PS3': 'Sony',
    'PSP': 'Sony',
    'PS4': 'Sony',
    'DC': 'Sega',
    'PC': 'PC',
    'X360': 'Microsoft',
    'XOne': 'Microsoft',
    'XB': 'Microsoft',
    'Multi_Plateforme': 'Multi_Plateforme'
    }
    df['Fabricant'] = df['Platform'].map(mapping_fabricant)

    # Cr√©ation d'une nouvelle colonne "Utilisation" pour pr√©ciser l'usage des plateformes
    df['Utilisation'] = ''

    # Condition pour les plates-formes nomades
    nomade_platforms = ['DS', 'PSP', '3DS', 'GBA']
    df.loc[df['Platform'].isin(nomade_platforms), 'Utilisation'] = 'Nomade'

    # Condition pour les plates-formes fixes
    fixe_platforms = ['PS2', 'WiiU', 'PS', 'N64', 'NS', 'PC', 'GC', 'PS3', 'Wii', 'PS4', 'X360', 'DC', 'XOne', 'XB']
    df.loc[df['Platform'].isin(fixe_platforms), 'Utilisation'] = 'Fixe'

    option = st.radio(
    "Menu:",
    ('Le march√©','Plateformes', 'Genres', 'Studios','Publishers','Notes'))
    st.divider()
    
    if option == "Le march√©":
        st.title('Analyse des donn√©es du dataset VgChartz')

        # PIE DE LA REPARTITION
        st.subheader("R√©partions des ventes par zones g√©ographiques")
        df_areas = df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
        df_areas = df_areas.sum().reset_index()
        df_areas = df_areas.rename(columns={"index": "Areas", 0: "Sales"})
        labels = df_areas['Areas']
        sizes = df_areas['Sales']
        colors = ['darkviolet', 'royalblue', 'hotpink', 'aqua']
        fig = px.pie(df_areas,
                values=sizes,
                names=labels,
                color_discrete_sequence=colors
        )
        st.plotly_chart(fig, theme="streamlit", use_container_width=True)
        
        st.markdown(
            """Nos ventes se concentrent sur trois principaux march√©s : North America, Europe, Japon (‚âà90%). 
Les ventes sur d'autres march√©s sont inf√©rieures √† 10%. 

A noter la concentration particuli√®re d'une part avec :
* North Amercia qui r√©alise pr√®s de la moiti√© des ventes
* Le Japon qui r√©alise plus de 10% des ventes √† mettre en perspecitive avec le nombre d'habitants.""")
        
        st.divider()
        st.subheader('Evolution des ventes en millions par zones g√©ographiques')
        # EVOLUTION DES VENTES
        data_NA = df.groupby(by=['Year'])['NA_Sales'].sum().reset_index()
        data_EU = df.groupby(by=['Year'])['EU_Sales'].sum().reset_index()
        data_JP = df.groupby(by=['Year'])['JP_Sales'].sum().reset_index()
        data_Others = df.groupby(by=['Year'])['Other_Sales'].sum().reset_index()
        data_globales = df.groupby(by=['Year']).sum().reset_index()
        fig = px.line(data_frame=data_globales, x='Year', y='Global_Sales', labels={'Year': 'Year', 'Global_Sales': 'Sales'})
        fig.add_scatter(x=data_NA['Year'], y=data_NA['NA_Sales'], mode='lines', name='NA_Sales', line_color='darkviolet')
        fig.add_scatter(x=data_EU['Year'], y=data_EU['EU_Sales'], mode='lines', name='EU_Sales', line_color='royalblue')
        fig.add_scatter(x=data_JP['Year'], y=data_JP['JP_Sales'], mode='lines', name='JP_Sales', line_color='hotpink')
        fig.add_scatter(x=data_Others['Year'], y=data_Others['Other_Sales'], mode='lines', name='Other_Sales', line_color='aqua')
        fig.add_scatter(x=data_globales['Year'], y=data_globales['Global_Sales'], mode='lines', name='Global_Sales', line_color='gray')
        fig.update_layout(
            xaxis_title='Ann√©es',
            yaxis_title='Ventes',
            legend_title='Zones g√©ographiques',
            width=800,
            height=600,
            yaxis_range=[0, 600],
        )
        st.plotly_chart(fig, use_container_width=True)
        st.markdown(
            """Le march√© du jeu vid√©o a commenc√© sa croissance √† partir de la seconde moiti√© des ann√©es 90, dynamis√© par le lancement de nouvelles plateformes :
* Sortie de la PlayStation en 1995
* Nouvel √©lan dans les ann√©es 2000 avec la sortie de la Nintendo 64

Apr√®s une forte croissance (2005 √† 2010), le march√© revient √† sa tendance initiale. """)

        st.divider()

        option_area = st.selectbox(
            '**S√©lectionner la zone g√©ographique que vous souhaitez analyser :**',
            options=['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales'],
            help = "NA = North America, EU = Europe, JP = Japan",
            index=4,
            key='area_options'
        )

        DICT_FAB = {'Sony': 'dodgerblue',
                        'Nintendo': 'tomato',
                        'Microsoft': 'darkgreen', 
                        'PC': 'lavender',
                        'Multi_Plateforme': 'gold',
                        'Sega':'black'}

        # V√©rification de la s√©lection
        if option_area is None:
            st.warning('Merci de s√©lectionner une zone g√©ographique')
        else:
            st.subheader('Evolution des ventes par fabricants de plateforme')
            st.caption("‚ö†Ô∏è Pensez √† modifier le filtre du menu d√©roulant ci-dessus pour modifier l'affichage par zone g√©ographique")


            df_cumulative = pd.DataFrame(df.groupby(['Year', 'Fabricant']).sum().reset_index())

            fig = px.line(df_cumulative, x='Year', y=option_area, color='Fabricant')

            fig.update_layout(
                xaxis_title='',
                yaxis_title='',
                legend_title='Fabricant',
                width=800,
                height=600
            )
            st.plotly_chart(fig)
            st.markdown('> Pour ce graphique nous avons proc√©d√© √† un retraitement manuel des plateformes pour les rassembler par fabricant.')

        # Sous-titre pour le graphique
        st.subheader('Evolution des ventes par mode de consommation')
        st.caption("‚ö†Ô∏è Pensez √† modifier le filtre du menu d√©roulant plus haut pour modifier l'affichage par zone g√©ographique")

        df_cumulative_util = df[df['Utilisation'].notna() & (df['Utilisation'] != '')]
        df_cumulative_util = pd.DataFrame(df_cumulative_util.groupby(['Year', 'Utilisation']).sum().reset_index())
        

        fig = px.line(df_cumulative_util, x='Year', y=option_area, color='Utilisation')

        fig.update_layout(
            xaxis_title='',
            yaxis_title='',
            legend_title='Utilisation',
            width=800,
            height=600
        )
        st.plotly_chart(fig)
        st.markdown("> Pour ce graphique nous avons proc√©d√© √† un retraitement manuel des plateformes pour les classer par mode d'utilisation.")


        st.divider()
        st.subheader("Ventes par jeux vid√©o")
        st.caption("‚ö†Ô∏è Pensez √† modifier le filtre du menu d√©roulant plus haut pour modifier l'affichage par zone g√©ographique")
        source = ColumnDataSource(df)
        hover = HoverTool(
        tooltips=[
            ("Nom", "@Name"),
            ("Genre", "@Genre"),
            ("Ann√©e", "@Year"),
            ("Platform", "@Platform"),
            ("Studio", "@Studio"),
            ("Publisher", "@Publisher"),
            ("Note", '@Critic_Score'),
            ("Ventes", '@Global_Sales') ])
        p98 = figure(plot_width=800, plot_height=700,x_axis_label='Ann√©es', y_axis_label='Ventes')
        doc = curdoc()
        doc.theme = 'dark_minimal'
        doc.add_root(p98)
        p98.circle(x='Year',y=option_area,source = source,color='darkviolet',size=10)
        p98.add_tools(hover)
        st.bokeh_chart(p98, use_container_width=True)
        st.markdown("> Survolez les points du graphique pour faire appara√Ætre le d√©tail.")
        st.markdown("Certains jeux ont connu un succ√®s exceptionnel, c'est notamment le cas pour Wii Sport sorti en 2006 chez Nintendo.")
        st.markdown("Ce graphique nous permet d'identifier les jeux qui se sont d√©marqu√©s en terme de ventes et appr√©cier les variables en lien. On peut identifier des \"sagas\" qui ont bien march√© (Mario, Pokemon, Grand Theft Auto).")

    if option == 'Plateformes':
            # Replace smaller values with 'Autre' in the 'Platform' column
            #df['Platform'] = df['Platform'].replace(['WiiU', 'PS4', 'XOne', 'XB', 'DC'], ['Autre', 'Autre', 'Autre', 'Autre', 'Autre'])

            option_plateforme = st.multiselect(
                '**S√©lectionner les plateformes que vous souhaitez comparer :**',
                options=df['Platform'].unique(),
                default=df['Platform'].unique(),
                key='plateformes_options'
            )

            # Selected platforms
            if len(option_plateforme) == 0:
                st.warning('Merci de s√©lectionner au moins une plateforme')

            # Filter the data based on the selected platforms
            df_filtered = df[df['Platform'].isin(option_plateforme)]

            # Dictionnaire des couleurs par modalit√©s pour retrouver les m√™mes sur l'ensemble des graphiques
            DICT_PLAT = {'PS2': 'dodgerblue',
                        'Wii': 'tomato',
                        'GBA': 'mediumaquamarine', 
                        'Autre': 'mediumpurple',
                        'DS': 'sandybrown',
                        'PS3': 'lightskyblue',
                        'GC': 'indigo',
                        'PS': 'navy',
                        'PSP': 'dodgerblue',
                        'Multi_Plateforme': 'gold',
                        'PC': 'lavender',
                        'X360': 'darkgreen',
                        '3DS': 'salmon',
                        'NS': 'peru',
                        'N64': 'peachpuff',
                        'WiiU':'brown',
                        'PS4':'lightsteelblue',
                        'XOne':'lime',
                        'XB':'green',
                        'DC':'black'}
            
            st.subheader('R√©partition des ventes par plateformes')
            fig = px.pie(df_filtered,
                        values='Global_Sales',
                        names='Platform',
                        color='Platform',
                        color_discrete_map=DICT_PLAT)

            st.plotly_chart(fig, use_container_width=True)
            st.markdown("""
            Nous constatons que les parts de march√© se r√©partissent de mani√®re √©quilibr√© entre les plateformes.

A noter que certaines plateformes tendent √† disparaitre car remplacer par leur upgrade (PS2 qui devient la PS3).""")

            st.divider()
            
            st.subheader('Evolution des ventes par plateformes')
            df_cumulative = pd.DataFrame(df_filtered.groupby(['Year', 'Platform']).count()).reset_index()

            fig = px.line(df_cumulative, x='Year', y='Global_Sales', color='Platform', color_discrete_map=DICT_PLAT)

            fig.update_layout(
                xaxis_title='',
                yaxis_title='',
                legend_title='Platform',
                width=800,
                height=600
            )
            st.plotly_chart(fig)

            st.divider()
            
            st.subheader('Analyse des valeurs extr√™mes par plateformes')
            fig = px.box(df_filtered,
             x='Platform',
             y='Global_Sales',
             color='Platform',
             color_discrete_map=DICT_PLAT,
             hover_data=['Name', 'Genre', 'Year', 'Studio', 'Publisher', 'Critic_Score', 'Global_Sales'])

            fig.update_layout(
                xaxis_title="",
                yaxis_title="",
                xaxis_tickangle=75,
                height=600,
                showlegend=False
            )

            st.plotly_chart(fig, use_container_width=True)
            st.markdown("""
Cette repr√©sentation graphique met en √©vidence le constat effectu√© pr√©c√©demment √† savoir que la plateforme Wii √† un outlier. Il s'agit de Wii Sport qui fait des records de ventes par rapport aux autres jeux de Wii. Nos recherches nous ont indiqu√© que ce jeu est sorti en 2006 en m√™me temps que la console Wii ce qui a particip√© √† l'engouement et l'explosion des ventes. Le jeu faisait parti d'une offre bundle avec la Wii. 

La DS a √©galement des valeurs extr√™mes qu'il sera int√©ressant de regarder avec New Super Mario.""")


            st.divider()
            st.subheader("Analyse de la corr√©lation des plateformes par zones g√©ographiques")
            comp_platform = df_filtered[['Platform', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
            comp_map = comp_platform.groupby(by=['Platform']).sum()

            plt.figure(figsize=(15, 10))
            sns.set(font_scale=1)
            ht = sns.heatmap(comp_map, annot=True, cmap="cool", fmt='.1f', cbar=False)
            fig2 = ht.get_figure()
            ax = ht.axes
            ax.tick_params(axis='x', colors='white')
            ax.tick_params(axis='y', colors='white')

            st.pyplot(fig2, use_container_width=True)

            st.markdown("""Element int√©ressant : nous pouvons constater que pour le Japon les plateformes qui ressortent le plus sont "nomades" (3DS et DS)""")


    if option == 'Genres':
            # Remplacer les modalit√©s peu nombreuse par Autre
            #df['Genre'] = df['Genre'].replace(['Music', 'Party','Action-Adventure'],['Autre','Autre','Autre'])
            
            option_genre = st.multiselect(
                '**S√©lectionner les genres que vous souhaitez comparer :**',
                options=df['Genre'].unique(),
                default=df['Genre'].unique(),
                key='genre_options'
            )

            # Selected platforms
            if len(option_genre) == 0:
                st.warning('Merci de s√©lectionner au moins un genre')

            # Filter the data based on the selected platforms
            df_filtered = df[df['Genre'].isin(option_genre)]

            

            # cr√©ation d'un dictionnaire pour avoir les m√™me couleurs
            DICT_GENRE = {'Role-Playing': 'dodgerblue',
            'Action': 'tomato',
            'Shooter': 'mediumaquamarine',
            'Sports': 'mediumpurple',
            'Platform': 'sandybrown',
            'Racing': 'lightskyblue',
            'Adventure': 'hotpink',
            'Fighting': 'palegreen',
            'Misc': 'violet',
            'Strategy': 'gold',
            'Simulation': 'lavender',
            'Puzzle': 'salmon',
            'Autre': 'aquamarine'}

            st.subheader('R√©partition des ventes par genre')
            fig = px.pie(df_filtered,
                        values='Global_Sales',
                        names='Genre',
                        color='Genre',
                        color_discrete_map=DICT_GENRE)

            st.plotly_chart(fig, use_container_width=True)
            
            st.divider()

            st.subheader('Evolution des ventes par genre')
            df_cumulative = pd.DataFrame(df_filtered.groupby(['Year', 'Genre']).count()).reset_index()

            fig = px.line(df_cumulative, x='Year', y='Global_Sales', color='Genre', color_discrete_map=DICT_GENRE)

            fig.update_layout(
                xaxis_title='',
                yaxis_title='',
                legend_title='Genre',
                width=800,
                height=600
            )
            st.plotly_chart(fig)
            st.markdown("""
            Certains genres presque inconnus du paysage des jeux vid√©os explosent sur certaines ann√©es. 

C'est le cas du genre :
* Action en 2009, avec 56 jeux sortis vs 30 √† N-1.
* Misc en 2009, 
* Aventure en 2009, 
* Sport qui passe d'un d√©clin vers 2004 √† un regain en 2006 avec le lancement de la Wii. """)

            st.divider()

            st.subheader('Analyse des valeurs extr√™mes par genres')
            fig = px.box(df_filtered,
             x='Genre',
             y='Global_Sales',
             color='Genre',
             color_discrete_map=DICT_GENRE,
             hover_data=['Name', 'Genre', 'Year', 'Studio', 'Publisher', 'Critic_Score', 'Global_Sales'])

            fig.update_layout(
                xaxis_title="",
                yaxis_title="",
                xaxis_tickangle=75,
                height=600,
                showlegend=False
            )

            st.plotly_chart(fig, use_container_width=True)
            st.markdown("""
On observe globalement que tous les genres ont plusieurs plusieurs valeurs extr√™mes.

On note que les plus significatives sont: 
* Mario pour "Platform"
* Wii Sport pour "Sport"
* Grand Theft Auto pour "Action"
* Call of Duty pour "Shooter"
* Pokemon "Role-Playing"
* Mario Kart pour "Racing" """)


            st.divider()
            st.subheader("Analyse de la corr√©lation des genres par zones g√©ographiques")
            comp_genre = df_filtered[['Genre', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
            comp_map = comp_genre.groupby(by=['Genre']).sum()

            plt.figure(figsize=(15, 10))
            sns.set(font_scale=1)
            ht = sns.heatmap(comp_map, annot=True, cmap="cool", fmt='.1f', cbar=False)
            fig2 = ht.get_figure()
            ax = ht.axes
            ax.tick_params(axis='x', colors='white')
            ax.tick_params(axis='y', colors='white')

            st.pyplot(fig2, use_container_width=True)

            st.markdown("""
            Nous constatons qu'il y'a des pr√©f√©rences de genre en fonction des zones g√©ographiques. Comme pour les plateformes le Japon a un genre qui se distingue plus que les autres.""")

    
    if option == 'Publishers':

            # Clusterisation Publisher
            df_publi = df.groupby(['Publisher']).agg({'Global_Sales':'sum'})
            df_publi['cat_publi'] = pd.qcut(df_publi['Global_Sales'],10,
            labels=['Cat√©gorie 10','Cat√©gorie 9','Cat√©gorie 8','Cat√©gorie 7','Cat√©gorie 6','Cat√©gorie 5','Cat√©gorie 4','Cat√©gorie 3','Cat√©gorie 2','Cat√©gorie 1'])

            df = df.merge(right = df_publi, on = 'Publisher', how = 'left') 
            df = df.drop(["Global_Sales_y"], axis=1)
            df = df.rename(columns={'Global_Sales_x' : 'Global_Sales'})

            option_publisher_categ = st.multiselect(
                '**S√©lectionner les cat√©gories de Publishers que vous souhaitez comparer :**',
                options=df['cat_publi'].unique(),
                default=['Cat√©gorie 1'],
                help = "Les Publishers sont r√©partis par cat√©gories, la Cat√©gorie 1 rassemble les 22 plus gros Publishers. Vous pouvez comparer les cat√©gories entre elles.",
                key='publisher_options_categ'
            )

            # Selected platforms
            if len(option_publisher_categ) == 0:
                st.warning('Merci de s√©lectionner au moins un Publisher')

            # Filter the data based on the selected platforms
            df_filtered = df[df['cat_publi'].isin(option_publisher_categ)]

         
            option_publisher = st.multiselect(
                '**S√©lectionner les Publishers que vous souhaitez comparer :**',
                options=df_filtered['Publisher'].unique(),
                default=df_filtered['Publisher'].unique(),
                key='publisher_options'
            )

            # Selected platforms
            if len(option_publisher) == 0:
                st.warning('Merci de s√©lectionner au moins un Publisher')

            # Filter the data based on the selected platforms
            df_filtered = df_filtered[df_filtered['Publisher'].isin(option_publisher)]


            st.subheader('R√©partition des ventes par Publisher')
            fig = px.pie(df_filtered,
                        values='Global_Sales',
                        names='Publisher',
                        color='Publisher')

            st.plotly_chart(fig, use_container_width=True)
            
            st.divider()

            st.subheader('Evolution des ventes par Publisher')
            df_cumulative = pd.DataFrame(df_filtered.groupby(['Year', 'Publisher']).count()).reset_index()

            fig = px.line(df_cumulative, x='Year', y='Global_Sales', color='Publisher')

            fig.update_layout(
                xaxis_title='',
                yaxis_title='',
                legend_title='Publisher',
                width=800,
                height=600
            )
            st.plotly_chart(fig)


            st.divider()
            
            st.subheader('Analyse des valeurs extr√™mes par Publisher')
            fig = px.box(df_filtered,
             x='Publisher',
             y='Global_Sales',
             color='Publisher',
             hover_data=['Name', 'Genre', 'Year', 'Studio', 'Publisher', 'Critic_Score', 'Global_Sales'])

            fig.update_layout(
                xaxis_title="",
                yaxis_title="",
                xaxis_tickangle=75,
                height=600,
                showlegend=False
            )

            st.plotly_chart(fig, use_container_width=True)


            st.divider()
            st.subheader("Analyse de la corr√©lation des Publishers par zones g√©ographiques")
            comp_publi = df_filtered[['Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
            comp_map = comp_publi.groupby(by=['Publisher']).sum()

            plt.figure(figsize=(15, 10))
            sns.set(font_scale=1)
            ht = sns.heatmap(comp_map, annot=True, cmap="cool", fmt='.1f', cbar=False)
            fig2 = ht.get_figure()
            ax = ht.axes
            ax.tick_params(axis='x', colors='white')
            ax.tick_params(axis='y', colors='white')

            st.pyplot(fig2, use_container_width=True)


    if option == 'Studios':

            option_studio = st.multiselect(
                '**S√©lectionner les Studios que vous souhaitez comparer :**',
                options=df['Studio'].unique(),
                default=['Capcom',
                'Konami',
                'Nintendo EAD',
                'EA Canada',
                'Square Enix',
                'Ubisoft Montreal',
                'EA Tiburon',
                'Namco',
                'Sonic Team',
                'Hudson Soft',
                'Rare Ltd.',
                'Atlus Co.',
                'Ubisoft',
              'Game Freak',
              'Rockstar North',
              'Infinity Ward',
              "Traveller's Tales",
              'Treyarch',
              'Good Science Studio',
              'Nintendo SDD',
              'Sledgehammer Games',
              'Dice',
              'Neversoft',
              'Nintendo EAD / Retro Studios',
              'Rockstar Games',
              'EA DICE',
              'Bethesda Game Studios',
              'Polyphony Digital',
              '4J Studios',
              'Nintendo EAD Tokyo',
              'Bungie Studios',
              'Project Sora',
              'Naughty Dog',
              'Team Bondi', 
              'Level 5 / Armor Project',
              'Bungie'],
                key='studio_options'
            )

            # Selected platforms
            if len(option_studio) == 0:
                st.warning('Merci de s√©lectionner au moins un Studio')

            # Filter the data based on the selected platforms
            df_filtered = df[df['Studio'].isin(option_studio)]

            st.subheader('R√©partition des ventes par Studio')
            fig = px.pie(df_filtered,
                        values='Global_Sales',
                        names='Studio',
                        color='Studio')

            st.plotly_chart(fig, use_container_width=True)
            
            st.divider()

            st.subheader('Evolution des ventes par Studio')
            df_cumulative = pd.DataFrame(df_filtered.groupby(['Year', 'Studio']).count()).reset_index()

            fig = px.line(df_cumulative, x='Year', y='Global_Sales', color='Studio')

            fig.update_layout(
                xaxis_title='',
                yaxis_title='',
                legend_title='Studio',
                width=800,
                height=600
            )
            st.plotly_chart(fig)


            st.divider()
            
            st.subheader('Analyse des valeurs extr√™mes par Studio')
            fig = px.box(df_filtered,
             x='Studio',
             y='Global_Sales',
             color='Studio',
             hover_data=['Name', 'Genre', 'Year', 'Publisher', 'Studio', 'Critic_Score', 'Global_Sales'])

            fig.update_layout(
                xaxis_title="",
                yaxis_title="",
                xaxis_tickangle=75,
                height=600,
                showlegend=False
            )

            st.plotly_chart(fig, use_container_width=True)


            st.divider()
            st.subheader("Analyse de la corr√©lation des Studios par zones g√©ographiques")
            comp_publi = df_filtered[['Studio', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
            comp_map = comp_publi.groupby(by=['Studio']).sum()

            plt.figure(figsize=(15, 10))
            sns.set(font_scale=1)
            ht = sns.heatmap(comp_map, annot=True, cmap="cool", fmt='.1f', cbar=False)
            fig2 = ht.get_figure()
            ax = ht.axes
            ax.tick_params(axis='x', colors='white')
            ax.tick_params(axis='y', colors='white')

            st.pyplot(fig2, use_container_width=True)
            


            
        


    if option == 'Notes':
            df['Critic_Score'] = round(df['Critic_Score'], 0).astype(int)
            


            option_note = st.multiselect(
                '**S√©lectionner les notes que vous souhaitez comparer :**',
                options=df['Critic_Score'].unique(),
                default=[1,2,3,4,5,6,7,8,9,10],
                key='note_options'
            )

            # Selected platforms
            if len(option_note) == 0:
                st.warning('Merci de s√©lectionner au moins une note')

            # Filter the data based on the selected platforms
            df_filtered = df[df['Critic_Score'].isin(option_note)]
            DICT_NOTE = {'8': 'dodgerblue',
            '9': 'tomato',
            '7': 'mediumaquamarine',
            '6': 'mediumpurple',
            '10': 'sandybrown',
            '5': 'lightskyblue',
            '4': 'hotpink',
            '3': 'palegreen',
            '2': 'violet',
            '1': 'gold'}

            st.subheader('R√©partition des ventes par note')
            df_filtered['Critic_Score'] = df_filtered['Critic_Score'].astype(str)

            fig = px.pie(df_filtered,
                        values='Global_Sales',
                        names='Critic_Score',
                        color='Critic_Score',
                        color_discrete_map=DICT_NOTE
                        )

            st.plotly_chart(fig, use_container_width=True)
            
            st.divider()

            st.subheader('Analyse des valeurs extr√™mes par note')

            fig2 = px.box(df_filtered,
                        x='Critic_Score',
                        y='Global_Sales',
                        color='Critic_Score',
                        color_discrete_map=DICT_NOTE,
                        hover_data=['Name', 'Genre', 'Year', 'Studio', 'Publisher', 'Critic_Score', 'Global_Sales'])

            fig2.update_layout(
                xaxis_title="Critic Score",
                yaxis_title="Global Sales",
                xaxis_tickangle=75,
                showlegend=False
            )

            fig2.update_xaxes(categoryorder='array', categoryarray=sorted(df[df['Critic_Score'].isin(option_note)]))

            st.plotly_chart(fig2, use_container_width=True)


# Modelisation
if selected == "Mod√©lisation":
    tab1, tab2, tab3 = st.tabs(["Introduction", "Etapes de la Mod√©lisation", 'R√©sultats'])
    with tab1:
        st.header('Dataset Mod√©lisation:')
        st.subheader('Variable Cible')
        st.markdown('-  Global_Sales')
        st.subheader('Variables Explicatives')
        st.markdown("-  L'ann√©e de sortie (Year)  \n-  Le genre (Genre)  \n-  Le studio l‚Äôayant d√©velopp√© (Studio)  \n-  L‚Äô√©diteur l‚Äôayant publi√© (Publisher)  \n-  La plateforme sur laquelle le jeu est sortie (Platform)  \n-  Les notes utilisateurs (Critic_Score)")  
        st.markdown("Nous avons choisi d'appliquer des mod√®les de r√©gression pour pr√©dire notre variable en quantit√© (r√©gression lin√©aire, arbre de d√©cision, for√™t al√©atoire). ")
        
    with tab2:
        # texte violet
        st.markdown("""
        <style>
        .purple {
            color : darkviolet;
        }
        </style>
        """, unsafe_allow_html=True)
        
        #Pr√©processing Etapes
        st.header('Pre-processing:')
        st.markdown('<p class="purple">Etape 1: Clustering des variables studio et publisher</p>', unsafe_allow_html=True)
        st.markdown('-  Suite au nombre important de modalit√©s dans ces trois colonnes (+700 pour studio), nous avons simplifi√© les variables en utilisant la m√©thode du clustering. Studio, Publisher: 1 √† 4 suivant leur montant de Global_Sales')
        st.markdown('<p class="purple">Etape 2: Suppression des variables non pertinentes pour la mod√©lisation (name, region sales, description)</p>', unsafe_allow_html=True)
        st.markdown('<p class="purple">Etape 3: Encoding des variables cat√©gorielles</p>', unsafe_allow_html=True)
        
        #Mod√©lisation Etapes
        st.header('Mod√©lisation:')
        st.markdown('<p class="purple">Etape 4: Analyse de l importance des variables, It√©ration 2</p>', unsafe_allow_html=True)
        
        st.header('R√©sultats:')
        # Graph importance 
        v1 = ([0.33011073, 0.21852045, 0.00776532, 0.062745  , 0.0032006 ,
        0.00506196, 0.00514901, 0.01860793, 0.00530342, 0.00532782,
        0.01765334, 0.00209605, 0.01434875, 0.01864197, 0.02456184,
        0.01448861, 0.02698887, 0.00310434, 0.00044673, 0.03785596,
        0.00462839, 0.00362745, 0.09522153, 0.00242704, 0.00349292,
        0.00649888, 0.00348894, 0.00684423, 0.0031338 , 0.00686099,
        0.00162643, 0.02738152, 0.0014133 , 0.01008641, 0.00066476,
        0.00062469])

        v2 = (['Critic_Score', 'Year', 'cat_publi', 'cat_studio',
        'Genre_Action-Adventure', 'Genre_Adventure', 'Genre_Fighting',
        'Genre_Misc', 'Genre_Music', 'Genre_Party', 'Genre_Platform',
        'Genre_Puzzle', 'Genre_Racing', 'Genre_Role-Playing', 'Genre_Shooter',
        'Genre_Simulation', 'Genre_Sports', 'Genre_Strategy', 'Platform_DC',
        'Platform_DS', 'Platform_GBA', 'Platform_GC',
        'Multi_Plateforme', 'Platform_N64', 'Platform_NS',
        'Platform_PC', 'Platform_PS', 'Platform_PS2', 'Platform_PS3',
        'Platform_PS4', 'Platform_PSP', 'Platform_Wii', 'Platform_WiiU',
        'Platform_X360', 'Platform_XB', 'Platform_XOne'])

        importances = v1
        feat_importances = pd.Series(importances, index=v2)

        # Trier les variables par ordre d'importance d√©croissante
        feat_importances = feat_importances.sort_values(ascending=False).head(10)

        # Afficher le graphique en barres
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.bar(feat_importances.index, feat_importances.values, color="darkviolet")
        ax.set_title("Importance de chaque variable")
        ax.set_ylabel("Importance")
        ax.tick_params(axis="x", rotation=75)
        

        # Afficher le graphique dans Streamlit
        sns.set(style="ticks", context="talk")
        #plt.style.use("dark_background")
        st.pyplot(fig)
        st.markdown('Notre analyse nous indique que les variables Critic_score et Year sont celles qui ont le plus de poids.')
        st.markdown('<p class="purple">Etape 5: Calcul des meilleurs hyperparam√®tres via une GridSearch.</p>', unsafe_allow_html=True)
        st.markdown("Nous avons choisi d'appliquer des mod√®les de r√©gression pour pr√©dire notre variable en quantit√© (r√©gression lin√©aire, arbre de d√©cision, for√™t al√©atoire).")
        
        
    with tab3:
        
        # Graph R√©sultats
        x = ["R√©gression Logistique","Arbre de D√©cision","Random Forest"]
        y = [0.11884109217929484,-0.2,0.10571851988597436]
        fig, ax = plt.subplots(figsize=(12, 6))
        color = ['#EEA2AD','#87CEFA','#8470FF']
        ax.bar(x, y, color=color, width=0.6)
        ax.set_ylim(-0.5, 1)
        ax.grid(axis='y')
        ax.set_title("R√©sultats")
        ax.tick_params(axis="x", rotation=55)
        sns.set(style="ticks", context="talk")
        #plt.style.use("dark_background")
        st.pyplot(fig)
        st.markdown('>Les performances des mod√®les ne sont pas bonnes.  \nNous ne pouvons donc pr√©voir les ventes !')







if selected == "Conclusion":
    st.markdown("""Des difficult√©s ont √©t√© rencontr√©es pour pr√©dire les ventes en quantit√© en partant de notre dataset. 

**Les difficult√©s principales identifi√©es sont:**
* Le match de la collecte de donn√©es via scrapping
* Le non partitionnement par la dur√©e sur les ventes

Les approches que nous pourrions proposer pour pallier ces difficult√©s:
* Trouver un positionnement sur le march√© avec le :
    * Point de vue du studio
    * Point de vue du publisher
    * Point de vue sur une p√©riode de temps

* Interpr√©ation diff√©rente entre les s√©ries de jeux (GTA) et les one-shoot""")

    st.markdown("""
    **Il faut √©galement prendre en compte pour ces projections les √©l√©ments suivants:**
    
    * Analyse de sentiment pour pr√©dire l'engouement avant la sortie des jeux (commentaires sur le trailer, nombre de vues) 
    * Analyse du march√©:
        * Concurrence: cours de la bourse sur les acteurs du jeu vid√©o
        * Economique: pouvoir d'achat sur le march√© (ex: crise √©conomique)
        * Socioculturel: √©tude sur les comportements des consommateurs (ex: genre attendu par √¢ge, pays)
        * Technologique: innovations sur le march√©
        * Saisonnalit√©""")
